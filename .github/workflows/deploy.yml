name: üöÄ Multi-Environment QWV VPN Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to specific environment'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - single
        - asia
        - us
        - eu
        - all

jobs:
  # Detect deployment mode (single vs multi-environment)
  detect-mode:
    name: Detect Deployment Mode
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.detect.outputs.mode }}
      environments: ${{ steps.detect.outputs.environments }}
    
    steps:
    - name: üîç Detect Deployment Configuration
      id: detect
      run: |
        # Use GitHub Variables to detect multi-environment setup
        # Variables are safe to check and publicly visible
        if [ -n "${{ vars.VPN_DOMAIN_ASIA }}" ] || [ -n "${{ vars.VPN_DOMAIN_US }}" ] || [ -n "${{ vars.VPN_DOMAIN_EU }}" ]; then
          echo "Multi-environment configuration detected via Variables"
          MODE="multi"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ github.event.inputs.environment }}" in
              "single")
                MODE="single"
                ENVIRONMENTS="[\"single\"]"
                echo "Force single-environment mode requested"
                ;;
              "asia")
                ENVIRONMENTS="[\"asia\"]"
                echo "Deploy to Asia environment only"
                ;;
              "us")
                ENVIRONMENTS="[\"us\"]"
                echo "Deploy to US environment only"
                ;;
              "eu")
                ENVIRONMENTS="[\"eu\"]"
                echo "Deploy to EU environment only"
                ;;
              "all")
                ENVIRONMENTS="[\"asia\", \"us\", \"eu\"]"
                echo "Deploy to all multi-environments"
                ;;
              "auto"|*)
                ENVIRONMENTS="[\"asia\", \"us\", \"eu\"]"
                echo "Auto-deploy to all available environments"
                ;;
            esac
          else
            ENVIRONMENTS="[\"asia\", \"us\", \"eu\"]"
            echo "Auto-triggered: deploying to all multi-environments"
          fi
        elif [ -n "${{ vars.VPN_DOMAIN }}" ]; then
          echo "Single-environment configuration detected"
          MODE="single"
          ENVIRONMENTS="[\"single\"]"
        else
          # Fallback to legacy detection
          echo "Using legacy mode detection"
          MODE="single"
          ENVIRONMENTS="[\"single\"]"
        fi
        
        echo "mode=$MODE" >> $GITHUB_OUTPUT
        echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment mode: $MODE"
        echo "üéØ Target environments: $ENVIRONMENTS"

  deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: detect-mode
    
    # Deploy on push to main branch (not on PR) or manual workflow dispatch
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.detect-mode.outputs.environments) }}
      fail-fast: false  # Continue deploying to other environments even if one fails
    
    environment: ${{ matrix.environment != 'single' && matrix.environment || 'production' }}
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîß Set Environment Variables
      run: |
        if [ "${{ matrix.environment }}" = "single" ]; then
          echo "ENV_REGION=Single Environment" >> $GITHUB_ENV
          echo "ENV_EMOJI=üîß" >> $GITHUB_ENV
          echo "ENV_TIMEZONE=UTC" >> $GITHUB_ENV
        else
          case "${{ matrix.environment }}" in
            "asia")
              echo "ENV_REGION=Asia" >> $GITHUB_ENV
              echo "ENV_EMOJI=üåè" >> $GITHUB_ENV
              echo "ENV_TIMEZONE=Asia/Taipei" >> $GITHUB_ENV
              ;;
            "us")
              echo "ENV_REGION=United States" >> $GITHUB_ENV
              echo "ENV_EMOJI=üá∫üá∏" >> $GITHUB_ENV
              echo "ENV_TIMEZONE=America/New_York" >> $GITHUB_ENV
              ;;
            "eu")
              echo "ENV_REGION=Europe" >> $GITHUB_ENV
              echo "ENV_EMOJI=üá™üá∫" >> $GITHUB_ENV
              echo "ENV_TIMEZONE=Europe/London" >> $GITHUB_ENV
              ;;
          esac
        fi
        
    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        
        # Get environment-specific SSH key
        if [ "${{ matrix.environment }}" = "single" ]; then
          # Legacy single-environment mode
          echo "${{ secrets.VPN_SSH_KEY }}" > ~/.ssh/id_rsa
          VPN_HOST="${{ secrets.VPN_HOST }}"
          VPN_USER="${{ secrets.VPN_USER }}"
          VPN_PORT="${{ secrets.VPN_PORT }}"
        else
          # Multi-environment mode
          case "${{ matrix.environment }}" in
            "asia")
              echo "${{ secrets.VPN_SSH_KEY_ASIA }}" > ~/.ssh/id_rsa
              VPN_HOST="${{ secrets.VPN_HOST_ASIA }}"
              VPN_USER="${{ secrets.VPN_USER_ASIA }}"
              VPN_PORT="${{ secrets.VPN_PORT_ASIA }}"
              ;;
            "us")
              echo "${{ secrets.VPN_SSH_KEY_US }}" > ~/.ssh/id_rsa
              VPN_HOST="${{ secrets.VPN_HOST_US }}"
              VPN_USER="${{ secrets.VPN_USER_US }}"
              VPN_PORT="${{ secrets.VPN_PORT_US }}"
              ;;
            "eu")
              echo "${{ secrets.VPN_SSH_KEY_EU }}" > ~/.ssh/id_rsa
              VPN_HOST="${{ secrets.VPN_HOST_EU }}"
              VPN_USER="${{ secrets.VPN_USER_EU }}"
              VPN_PORT="${{ secrets.VPN_PORT_EU }}"
              ;;
          esac
        fi
        
        chmod 600 ~/.ssh/id_rsa
        
        # Save environment variables for later steps
        echo "VPN_HOST=$VPN_HOST" >> $GITHUB_ENV
        echo "VPN_USER=$VPN_USER" >> $GITHUB_ENV
        echo "VPN_PORT=${VPN_PORT:-22}" >> $GITHUB_ENV
        
        # SSH configuration to avoid host key checking
        cat >> ~/.ssh/config << EOF
        Host $VPN_HOST
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
        EOF
        
        # Add host key
        if [ -n "$VPN_PORT" ] && [ "$VPN_PORT" != "22" ]; then
          ssh-keyscan -p $VPN_PORT -H $VPN_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
        else
          ssh-keyscan -H $VPN_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
        fi
        
    - name: üîç Verify Connection
      run: |
        SSH_OPTIONS="-o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        if [ "$VPN_PORT" != "22" ]; then
          SSH_OPTIONS="$SSH_OPTIONS -p $VPN_PORT"
        fi
        
        echo "${{ env.ENV_EMOJI }} Connecting to ${{ env.ENV_REGION }} server..."
        ssh $SSH_OPTIONS $VPN_USER@$VPN_HOST "echo '‚úÖ SSH connection to ${{ env.ENV_REGION }} successful'"
        
    - name: üìã Check Server Status
      run: |
        SSH_OPTIONS="-o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        if [ "$VPN_PORT" != "22" ]; then
          SSH_OPTIONS="$SSH_OPTIONS -p $VPN_PORT"
        fi
        
        ssh $SSH_OPTIONS $VPN_USER@$VPN_HOST "
          echo '${{ env.ENV_EMOJI }} Checking ${{ env.ENV_REGION }} server status:'
          echo 'üîç Docker version:'
          docker --version
          echo 'üìä Running containers:'
          docker ps || true
          echo 'üíΩ Disk space:'
          df -h / || true
          echo 'üíæ Memory usage:'
          free -h || true
          echo 'üì° Network info:'
          curl -s https://ipinfo.io/ip || true
        "
        
    - name: üîÑ Deploy to Server
      run: |
        SSH_OPTIONS="-o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        if [ "$VPN_PORT" != "22" ]; then
          SSH_OPTIONS="$SSH_OPTIONS -p $VPN_PORT"
        fi
        
        # Get environment-specific domain configuration from Variables
        if [ "${{ matrix.environment }}" = "single" ]; then
          # Legacy single-environment mode
          VPN_DOMAIN="${{ vars.VPN_DOMAIN }}"
          if [ -z "$VPN_DOMAIN" ]; then
            # Fallback to legacy secrets format
            CF_ZONE="${{ secrets.CF_ZONE }}"
            CF_SUBDOMAIN="${{ secrets.CF_SUBDOMAIN }}"
            VPN_DOMAIN="$CF_SUBDOMAIN.$CF_ZONE"
          fi
          CF_API_TOKEN="${{ secrets.CF_API_TOKEN }}"
          DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH }}"
        else
          # Multi-environment mode using Variables
          case "${{ matrix.environment }}" in
            "asia")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_ASIA }}"
              CF_API_TOKEN="${{ secrets.CF_API_TOKEN_ASIA }}"
              DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_ASIA }}"
              ;;
            "us")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_US }}"
              CF_API_TOKEN="${{ secrets.CF_API_TOKEN_US }}"
              DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_US }}"
              ;;
            "eu")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_EU }}"
              CF_API_TOKEN="${{ secrets.CF_API_TOKEN_EU }}"
              DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_EU }}"
              ;;
          esac
        fi
        
        # Parse domain into zone and subdomain
        if [[ "$VPN_DOMAIN" == *.* ]]; then
          CF_SUBDOMAIN="${VPN_DOMAIN%%.*}"
          CF_ZONE="${VPN_DOMAIN#*.}"
        else
          echo "‚ùå Invalid domain format: $VPN_DOMAIN"
          exit 1
        fi
        
        echo "üåê Deploying VPN domain: $VPN_DOMAIN"
        echo "üì° Zone: $CF_ZONE, Subdomain: $CF_SUBDOMAIN"
        
        ssh $SSH_OPTIONS $VPN_USER@$VPN_HOST "
          set -e  # Exit immediately on error
          
          echo '${{ env.ENV_EMOJI }} Deploying to ${{ env.ENV_REGION }} server...'
          echo 'üìÇ Switching to deployment directory...'
          cd \${DEPLOY_PATH:-~/QWV}
          
          echo 'üì• Pulling latest code...'
          git fetch origin || { echo '‚ùå Git fetch failed'; exit 1; }
          git reset --hard origin/main || { echo '‚ùå Git reset failed'; exit 1; }
          
          echo 'üõë Stopping existing services...'
          ./scripts/manage.sh stop || echo '‚ö†Ô∏è Warning during service stop (service may not be running)'
          
          echo 'üì¶ Pulling latest images...'
          docker compose pull || { echo '‚ùå Docker compose pull failed'; exit 1; }
          
          echo 'üîß Setting up environment variables...'
          cat > .env << 'EOF'
        CF_API_TOKEN=$CF_API_TOKEN
        CF_ZONE=$CF_ZONE
        CF_SUBDOMAIN=$CF_SUBDOMAIN
        EOF
          
          echo '‚úÖ Environment variables configured for ${{ matrix.environment }}'
          echo 'üåê VPN Domain: $VPN_DOMAIN'
          
          echo 'üöÄ Starting services...'
          ./scripts/manage.sh start || { echo '‚ùå Failed to start services'; exit 1; }
          
          echo '‚è≥ Waiting for services to fully start...'
          sleep 15
          
          echo 'üìä Checking service status:'
          ./scripts/manage.sh status || { echo '‚ùå Cannot get service status'; exit 1; }
          
          echo 'üîç Checking WireGuard status:'
          ./scripts/manage.sh peers || echo '‚ö†Ô∏è No clients connected yet'
          
          echo '${{ env.ENV_EMOJI }} Deployment to ${{ env.ENV_REGION }} completed successfully!'
        "
        
    - name: üßπ Cleanup Images
      run: |
        SSH_OPTIONS="-o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        if [ "$VPN_PORT" != "22" ]; then
          SSH_OPTIONS="$SSH_OPTIONS -p $VPN_PORT"
        fi
        
        ssh $SSH_OPTIONS $VPN_USER@$VPN_HOST "
          echo 'üßπ Cleaning up unused Docker images...'
          docker image prune -f || echo '‚ö†Ô∏è Warning during image cleanup'
          
          echo 'üóëÔ∏è Cleaning up unused containers...'
          docker container prune -f || echo '‚ö†Ô∏è Warning during container cleanup'
          
          echo 'üíæ Disk space after cleanup:'
          df -h / || true
        "
        
    - name: ‚úÖ Deployment Success Notification
      run: |
        # Get domain configuration for notification
        if [ "${{ matrix.environment }}" = "single" ]; then
          VPN_DOMAIN="${{ vars.VPN_DOMAIN }}"
          if [ -z "$VPN_DOMAIN" ]; then
            CF_SUBDOMAIN="${{ secrets.CF_SUBDOMAIN }}"
            CF_ZONE="${{ secrets.CF_ZONE }}"
            VPN_DOMAIN="$CF_SUBDOMAIN.$CF_ZONE"
          fi
        else
          case "${{ matrix.environment }}" in
            "asia")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_ASIA }}"
              ;;
            "us")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_US }}"
              ;;
            "eu")
              VPN_DOMAIN="${{ vars.VPN_DOMAIN_EU }}"
              ;;
          esac
        fi
        
        echo "üéâ VPN service successfully deployed to ${{ env.ENV_REGION }}!"
        echo "üìç Server: $VPN_HOST"
        echo "üåê VPN Domain: $VPN_DOMAIN"
        echo "üîå VPN Port: 51820"
        echo "‚è∞ Deployment Time: $(date)"
        echo ""
        echo "üîó Next step: Login to server and run the following command to get client configuration:"
        echo "   ./scripts/manage.sh qr <client_name>"
        
    - name: üö® Deployment Failure Rollback
      if: failure()
      run: |
        echo "‚ùå Deployment to ${{ env.ENV_REGION }} failed, attempting rollback..."
        SSH_OPTIONS="-o ConnectTimeout=10 -o StrictHostKeyChecking=no"
        if [ "$VPN_PORT" != "22" ]; then
          SSH_OPTIONS="$SSH_OPTIONS -p $VPN_PORT"
        fi
        
        DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH }}"
        if [ "${{ matrix.environment }}" != "single" ]; then
          case "${{ matrix.environment }}" in
            "asia") DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_ASIA }}" ;;
            "us") DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_US }}" ;;
            "eu") DEPLOY_PATH="${{ secrets.VPN_DEPLOY_PATH_EU }}" ;;
          esac
        fi
        
        ssh $SSH_OPTIONS $VPN_USER@$VPN_HOST "
          cd \${DEPLOY_PATH:-~/QWV}
          echo 'üîÑ Attempting to restart services...'
          ./scripts/manage.sh restart || echo '‚ùå Cannot restart services'
          echo 'üìä Checking service status:'
          ./scripts/manage.sh status || echo '‚ùå Service abnormal'
        " || echo "‚ùå Cannot connect to server for rollback"

  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîß Install Validation Tools
      run: |
        # Install shellcheck for script validation
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: üîç Execute Complete Project Validation
      run: |
        # Grant execute permissions to scripts
        chmod +x scripts/*.sh
        
        # Execute complete project validation
        ./scripts/validate.sh

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-mode, deploy, validate]
    if: always()
    
    steps:
    - name: üìä Generate Deployment Summary
      run: |
        echo "# üöÄ QWV VPN Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üîß Deployment Mode:** ${{ needs.detect-mode.outputs.mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.detect-mode.outputs.mode }}" = "multi" ]; then
          echo "| Environment | Status | Region | Domain |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|---------" >> $GITHUB_STEP_SUMMARY
          echo "| üåè Asia | ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Asia-Pacific | ${{ vars.VPN_DOMAIN_ASIA }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üá∫üá∏ US | ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | United States | ${{ vars.VPN_DOMAIN_US }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üá™üá∫ EU | ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Europe | ${{ vars.VPN_DOMAIN_EU }} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Environment | Status | Domain |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|---------" >> $GITHUB_STEP_SUMMARY
          echo "| üîß Single | ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | ${{ vars.VPN_DOMAIN }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 